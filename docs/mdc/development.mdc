---
description: "Development standards, coding conventions, and workflow guidelines"
globs: ["**/*.py", "**/*.md", "pyproject.toml", ".ruff.toml", ".mypy.ini"]
alwaysApply: true
---

# Development Workflow

## Coding Standards

### Python Project Configuration (pyproject.toml)
```toml
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "nhl-api"
version = "0.1.0"
description = "A comprehensive Python client for the NHL API"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"
dependencies = [
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "cachetools>=5.0.0",
    "redis>=5.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.0.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/nhl_api"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = ["E", "F", "I", "N", "W", "B", "C4", "UP", "ARG", "SIM", "TCH", "Q"]
ignore = ["E501", "B008", "C901"]

[tool.black]
target-version = ['py311']
line-length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/nhl_api",
    "--cov-report=term-missing",
    "--cov-report=html",
]
```

### Ruff Configuration (.ruff.toml)
```toml
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "W",   # pycodestyle warnings
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "Q",   # flake8-quotes
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101"]
```

### Black Configuration
```toml
[tool.black]
target-version = ['py311']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
```

## Naming Conventions

### Files and Directories
- **Files**: snake_case (`api_client.py`, `rate_limiter.py`)
- **Directories**: snake_case (`api_endpoints/`, `error_handlers/`)
- **Test Files**: `test_*.py` or `*_test.py`

### Code Elements
- **Classes**: PascalCase (`NHLClient`, `RateLimiter`)
- **Protocols/ABCs**: PascalCase (`NHLRepository`, `CacheStrategy`)
- **Types**: PascalCase (`TeamResponse`, `PlayerStats`)
- **Functions**: snake_case (`get_teams()`, `fetch_player_stats()`)
- **Variables**: snake_case (`team_id`, `player_stats`)
- **Constants**: UPPER_SNAKE_CASE (`MAX_RETRY_ATTEMPTS`, `DEFAULT_TIMEOUT`)

## Documentation Standards

### Docstring Comments
```python
def get_team(self, team_id: int, options: Optional[GetTeamOptions] = None) -> Team:
    """Retrieve team information from the NHL API.
    
    Args:
        team_id: The unique identifier for the team
        options: Optional parameters for the request
        
    Returns:
        Team information
        
    Raises:
        NHLNotFoundError: When team is not found
        NHLAPIError: When API request fails
        
    Example:
        ```python
        team = await client.get_team(1)
        print(team.name)  # "New Jersey Devils"
        ```
    """
    pass
```

### README Structure
1. **Project Description**
2. **Installation**
3. **Quick Start**
4. **API Reference**
5. **Examples**
6. **Configuration**
7. **Contributing**
8. **License**

## Testing Strategy

### Test Structure
```
tests/
├── unit/           # Unit tests
├── integration/    # Integration tests
├── e2e/           # End-to-end tests
├── fixtures/      # Test data
└── mocks/         # Mock implementations
```

### Testing Framework
- **Framework**: pytest
- **Coverage**: >90% target
- **Mocking**: pytest-mock + responses
- **Assertions**: pytest + custom fixtures

### Test Categories

#### Unit Tests
- **API Client Methods**
- **Utility Functions**
- **Type Guards**
- **Error Classes**
- **Configuration Parsing**

#### Integration Tests
- **End-to-End API Calls**
- **Cache Integration**
- **Rate Limiting**
- **Error Handling**

#### E2E Tests
- **Complete Workflows**
- **Real API Integration**
- **Performance Tests**

### Test Examples
```python
import pytest
from nhl_api import NHLClient, NHLNotFoundError

class TestNHLClient:
    def test_get_team_valid_id(self):
        client = NHLClient()
        team = client.get_team(1)
        
        assert team is not None
        assert team.id == 1
        assert team.name == "New Jersey Devils"
    
    def test_get_team_invalid_id(self):
        client = NHLClient()
        
        with pytest.raises(NHLNotFoundError):
            client.get_team(99999)
```

## Git Workflow

### Branch Strategy
- **main**: Production-ready code
- **develop**: Integration branch
- **feature/***: New features
- **bugfix/***: Bug fixes
- **hotfix/***: Critical fixes

### Commit Convention
```
type(scope): description

[optional body]

[optional footer]
```

**Types:**
- `feat`: New feature
- `fix`: Bug fix
- `docs`: Documentation
- `style`: Formatting
- `refactor`: Code refactoring
- `test`: Adding tests
- `chore`: Maintenance

**Examples:**
```
feat(api): add getPlayerStats method
fix(cache): resolve memory leak in LRU cache
docs(readme): update installation instructions
```

### Pull Request Process
1. **Create Feature Branch**
2. **Write Tests**
3. **Update Documentation**
4. **Run Linting**
5. **Run Tests**
6. **Create PR**
7. **Code Review**
8. **Merge to Develop**

## Development Environment

### Required Tools
- **Python**: 3.11+
- **uv**: Package manager
- **VS Code**: Recommended editor
- **Git**: Version control

### VS Code Extensions
- **Python**
- **Pylance**
- **Ruff**
- **Black Formatter**
- **pytest**
- **GitLens**
- **Thunder Client** (API testing)

### Scripts (using uv)
```bash
# Development
uv run python -m pytest                    # Run tests
uv run python -m pytest --cov             # Run tests with coverage
uv run ruff check .                       # Lint code
uv run ruff check . --fix                 # Fix linting issues
uv run black .                            # Format code
uv run mypy src/                          # Type checking

# Build and install
uv build                                  # Build package
uv pip install -e .                       # Install in development mode
uv pip install -e ".[dev]"               # Install with dev dependencies

# Documentation
uv run sphinx-build -b html docs docs/_build/html  # Build docs
```

## Quality Assurance

### Pre-commit Hooks
- **Linting**: ESLint check
- **Formatting**: Prettier format
- **Type Checking**: TypeScript compilation
- **Tests**: Unit test execution

### CI/CD Pipeline
1. **Install Dependencies**
2. **Lint Code**
3. **Type Check**
4. **Run Tests**
5. **Build Package**
6. **Deploy** (if applicable)

### Code Review Checklist
- [ ] **Functionality**: Does it work as expected?
- [ ] **Tests**: Are there adequate tests?
- [ ] **Documentation**: Is it documented?
- [ ] **Performance**: Any performance implications?
- [ ] **Security**: Any security concerns?
- [ ] **Accessibility**: Any accessibility issues?
- [ ] **Error Handling**: Proper error handling?
- [ ] **Edge Cases**: Edge cases considered?
description:
globs:
alwaysApply: true
---
